// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5 (swiftlang-1300.0.31.1 clang-1300.0.29.1)
// swift-module-flags: -target arm64-apple-ios10.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name KuaiYinAd
import AnyThinkRewardedVideo
import AnyThinkSDK
import AnyThinkSplash
import BUAdSDK
import Foundation
import PackageBridge
import Swift
import UIKit
import _Concurrency
@objc @_hasMissingDesignatedInitializers public class HMAdRewardedModel : ObjectiveC.NSObject {
  @objc deinit
}
public protocol HMAdBaseDelegate {
  func adIdError(with adModel: KuaiYinAd.HMAdSplashModel, error: Swift.Error?)
}
public enum AdPlatform : Swift.String {
  case native
  case lanren
  case topon
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum AdNativePlatform : Swift.String {
  case none
  case tt
  case gdt
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public func convertStringToPlatform(_ string: Swift.String?) -> (KuaiYinAd.AdPlatform?, KuaiYinAd.AdNativePlatform?)
@_hasMissingDesignatedInitializers public class HMAdManager {
  public class func setup(platform: KuaiYinAd.AdPlatform, nativePlatform: KuaiYinAd.AdNativePlatform = .none, appId: Swift.String, appKey: Swift.String = "")
  public class func showDebugLog(_ logEnabled: Swift.Bool)
  public class func version(with platform: KuaiYinAd.AdPlatform, nativePlatform: KuaiYinAd.AdNativePlatform = .none) -> Swift.String?
  @objc deinit
}
public protocol HMAdRewardedDelegate : ObjectiveC.NSObjectProtocol {
  func adIdError(with adModel: KuaiYinAd.HMAdRewardedModel, error: Swift.Error?)
  func didFinishLoadingAd(with adModel: KuaiYinAd.HMAdRewardedModel)
  func didFailToLoadingAd(with adModel: KuaiYinAd.HMAdRewardedModel, error: Swift.Error?)
  func adDidShow(for adModel: KuaiYinAd.HMAdRewardedModel)
  func adDidClose(for adModel: KuaiYinAd.HMAdRewardedModel)
  func adCountdownToZero(for adModel: KuaiYinAd.HMAdRewardedModel)
  func adDidClick(for adModel: KuaiYinAd.HMAdRewardedModel)
  func adDidClickSkip(for adModel: KuaiYinAd.HMAdRewardedModel)
  func adPlayError(for adModel: KuaiYinAd.HMAdRewardedModel, error: Swift.Error?)
  func adExposed(for adModel: KuaiYinAd.HMAdRewardedModel)
  func adDidRewardSuccess(for adModel: KuaiYinAd.HMAdRewardedModel)
}
public protocol HMAdLoadingDelegate {
  func didFinishLoadingAd(with adModel: KuaiYinAd.HMAdSplashModel)
  func didFailToLoadingAd(with adModel: KuaiYinAd.HMAdSplashModel, error: Swift.Error?)
}
public protocol HMAdSplashDelegate : AnyObject, KuaiYinAd.HMAdBaseDelegate, KuaiYinAd.HMAdLoadingDelegate {
  func splashDidShow(for adModel: KuaiYinAd.HMAdSplashModel)
  func splashDidShowFailed(for adModel: KuaiYinAd.HMAdSplashModel?, error: Swift.Error?)
  func splashDidClose(for adModel: KuaiYinAd.HMAdSplashModel)
  func splashDetailDidClose(for adModel: KuaiYinAd.HMAdSplashModel)
  func splashCountdownToZero(for adModel: KuaiYinAd.HMAdSplashModel)
  func splashDidClick(for adModel: KuaiYinAd.HMAdSplashModel)
  func splashDidClickSkip(for adModel: KuaiYinAd.HMAdSplashModel)
}
@_hasMissingDesignatedInitializers public class HMAdSplashManager {
  public static let shared: KuaiYinAd.HMAdSplashManager
  public func setAdPlatform(platform: KuaiYinAd.AdPlatform, nativePlatform: KuaiYinAd.AdNativePlatform = .none)
  public func show(with placementId: Swift.String, window: UIKit.UIWindow, delegate: KuaiYinAd.HMAdSplashDelegate?)
  @objc deinit
}
extension KuaiYinAd.HMAdSplashManager : KuaiYinAd.HMAdSplashDelegate {
  public func adIdError(with adModel: KuaiYinAd.HMAdSplashModel, error: Swift.Error?)
  public func didFinishLoadingAd(with adModel: KuaiYinAd.HMAdSplashModel)
  public func didFailToLoadingAd(with adModel: KuaiYinAd.HMAdSplashModel, error: Swift.Error?)
  public func splashDidShow(for adModel: KuaiYinAd.HMAdSplashModel)
  public func splashDidShowFailed(for adModel: KuaiYinAd.HMAdSplashModel?, error: Swift.Error?)
  public func splashDidClose(for adModel: KuaiYinAd.HMAdSplashModel)
  public func splashDetailDidClose(for adModel: KuaiYinAd.HMAdSplashModel)
  public func splashCountdownToZero(for adModel: KuaiYinAd.HMAdSplashModel)
  public func splashDidClick(for adModel: KuaiYinAd.HMAdSplashModel)
  public func splashDidClickSkip(for adModel: KuaiYinAd.HMAdSplashModel)
}
@_hasMissingDesignatedInitializers public class HMAdSplashModel {
  public var platform: KuaiYinAd.AdPlatform
  public var nativePlatform: KuaiYinAd.AdNativePlatform
  public var platformString: Swift.String?
  public var placementId: Swift.String?
  public var slotId: Swift.String?
  public var adSource: Swift.String?
  public var timeout: Foundation.TimeInterval?
  public var isAdValid: Swift.Bool
  public var ttAppId: Swift.String?
  public var ttSlotId: Swift.String?
  public var gdtAppId: Swift.String?
  public var gdtUnitId: Swift.String?
  public var bdAppId: Swift.String?
  public var bdAdPlaceId: Swift.String?
  public var ksAppId: Swift.String?
  public var ksPosId: Swift.String?
  convenience public init(with model: BUAdSDK.BUSplashAdView)
  convenience public init(withGDTSplashAd model: PackageBridge.GDTSplashAd?)
  convenience public init(withLRAdModel model: LRAD.LRAdModel?)
  convenience public init(with placementId: Swift.String, extra: [Swift.AnyHashable : Any]?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class HMAdRewardedManager : ObjectiveC.NSObject {
  public func setAdPlatform(platform: KuaiYinAd.AdPlatform, nativePlatform: KuaiYinAd.AdNativePlatform = .tt)
  public func show(with placementId: Swift.String, viewController: UIKit.UIViewController, delegate: KuaiYinAd.HMAdRewardedDelegate?)
  @objc deinit
}
extension KuaiYinAd.HMAdRewardedManager : KuaiYinAd.HMAdRewardedDelegate {
  public func adIdError(with adModel: KuaiYinAd.HMAdRewardedModel, error: Swift.Error?)
  public func didFinishLoadingAd(with adModel: KuaiYinAd.HMAdRewardedModel)
  public func didFailToLoadingAd(with adModel: KuaiYinAd.HMAdRewardedModel, error: Swift.Error?)
  public func adDidShow(for adModel: KuaiYinAd.HMAdRewardedModel)
  public func adDidClose(for adModel: KuaiYinAd.HMAdRewardedModel)
  public func adCountdownToZero(for adModel: KuaiYinAd.HMAdRewardedModel)
  public func adDidClick(for adModel: KuaiYinAd.HMAdRewardedModel)
  public func adDidClickSkip(for adModel: KuaiYinAd.HMAdRewardedModel)
  public func adPlayError(for adModel: KuaiYinAd.HMAdRewardedModel, error: Swift.Error?)
  public func adDidRewardSuccess(for adModel: KuaiYinAd.HMAdRewardedModel)
  public func adExposed(for adModel: KuaiYinAd.HMAdRewardedModel)
}
extension KuaiYinAd.AdPlatform : Swift.Equatable {}
extension KuaiYinAd.AdPlatform : Swift.Hashable {}
extension KuaiYinAd.AdPlatform : Swift.RawRepresentable {}
extension KuaiYinAd.AdNativePlatform : Swift.Equatable {}
extension KuaiYinAd.AdNativePlatform : Swift.Hashable {}
extension KuaiYinAd.AdNativePlatform : Swift.RawRepresentable {}
